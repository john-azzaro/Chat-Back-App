Process Notes for Chat Back App
===============================




About Process Notes
=============
"Process Notes" is a step-by-step workflow document that outlines the "phases" of app development and the successive steps
for each phase. Although documenting each step of the application development from start to finish is a bit more work, it 
has proven EXTREMELY valuable in bug hunting and ESPECIALLY refining workflow for future use. If you've seen my other projects
and process notes, you'll notice that the process notes evolve as I find ways to improve the documentation for content
and readability. In the case of the "issue index app", each phase has a title, brief description of the phase, individual steps
for each phase (with notes and intent), and notes at the end.





Objective and User Story
========================
The objective of this application is to create a multi-user chat room with custom rooms for users. When the user 
arrives, they will be able to either create a room or join a room. If the user creates a room of thier own, they 
will be prompted to input the name of the room and then the room will be created. The room will be listed on the 
main page and other users can join.





Extended Workflow Summary
=========================
    Phase 1: Project Setup:
        1. Project Setup
        2. Install Express
        3. Install development environment
        4. Add custom start scripts
        5. Add server.js





Phase 1: Project Setup
======================================================================================
* Basic setup, installation of dependencies, development environment setup, and essential 
   files like server.js, .gitignore, and .env.
======================================================================================

    // Project Setup:                           
        1.1:  Issue-Index-App                                     -- Create a folder to store you application.
        1.2:  npm init                                            -- Create a package.json file to start the project off.

    // Install express:
        1.3:  npm install express                                 -- Install express.
        1.4:  .gitignore > node_modules                           -- Tell git to ignore node_modules folder.

    // Install development environment:       
        1.5:  npm install --save-dev nodemon                      -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        1.6:  "devStart": "nodemon server.js"                     -- Run development environment (npm run devStart).
        1.7:  "start": "node server.js"                           -- Run server normally in a production environment (npm run start).
        
    // Add server.js file:       
        1.8:   server.js                                          -- Create main server file.





Phase 2: Adding Application Specific Dependencies
============================================================================================
* Every app will be different and thus need their own specific libraries/dependencies to 
  function. In the case of this app, we want to use a library called socket.io, which will
  allow us to use the chat functionality.
============================================================================================

  // Install project-specific dependencies:
    2.1: Install socket.io
      * For more information, see official documentation: https://socket.io/
        ------------------------------------------------------------------
            npm install socket.io
        ------------------------------------------------------------------




Phase 3: Create a socket.io server
===============================================================================================
* Unlike express apps where you would require express and instantiate the app, for this project
  pass the port number to the socket.io require.
=============================================================================================== 

  // Create a socket.io server:
    * To create a socket.io server, you need to load the library and then pass the port we want 
      to socket.io's require.
        -------------------------------------------------------
            const io = require('socket.io')(3000);
        -------------------------------------------------------

  // Establish user connection action:
    * When a user visit the website, the function is called (with socket passed as a parameter).
    * In essence, each new user is going to have thier own socket.
    * In the case of this socket, we are going to send a message to the user via socket.emit.
        ---------------------------------------------------------
            io.on('connection', function(socket) {
              console.log('new user');
              socket.emit('chat-message', 'Hello world')               -- event name is "chat-message" and the data is "hello world".
            });
        ---------------------------------------------------------





Phase 4: Create a client-side file for sockets
=============================================================================================
  * This is going to setup the socket in script.js
=============================================================================================
  // Create a script.js for client side js;
    4.1: Create script.js:
      ---------------------------------------------------
          script.js
      ---------------------------------------------------
  
  // Get the socket variable
    4.2: Get the socket variable in script.js 
      ----------------------------------------------------
          const socket = io('http://localhost:3000');              -- this is where the server is hosting the socket.io application.
      ----------------------------------------------------

  // 4.3: 
    * On an event of "chat-message", we want to call the function with the data that was sent down from the server.
      -------------------------------------------------
          socket.on('chat-message', data => {
            console.log(data);
          });
      -------------------------------------------------





Phase 5: Get message form when you submit message
===================================================================================================
  * Initial part of the functionality of the chat application when you send a message.
===================================================================================================
  
  // Select the message-container in the DOM:
    5.1: Create a selector for messageForm
      -------------------------------------------------------------------
          const messageForm = document.getElementById('send-container');
      --------------------------------------------------------------------

  // Add event listener
    * What this is going to do is that every time we submit the form (i.e. press the submit button),
    5.2: Add an event listne for messageForm:
      -------------------------------------------------------------------
          messageForm.addEventListener('submit', function(event) {
            event.preventDefault();                                           -- stop form from submitting/stop page from posting to the server/refreshing.

          })
      -------------------------------------------------------------------

  // Then get the message...
    5.3: Get message element:
      -----------------------------------------------------------------
          const messageInput = document.getElementById('message-input');
      -----------------------------------------------------------------

    5.4: Then in the event listener, get the messageInput value and send that info to the server.
      -------------------------------------------------------------------
          messageForm.addEventListener('submit', function(event) {
            event.preventDefault();                                            
            const message = messageInput.value;                                 -- gets the value of messageInput
            socket.emit('send-chat-message', message);                          -- sends information form the client to the server.
            messageInput.value = '';                                            -- reset messageInput field to empty string so it is blank    
          })
      -------------------------------------------------------------------

  // Then setup handling for the submission event...
    5.5: In server.js, 
      * so when the event "send-chat-message" is sent, we "broadcast" that message to everyone
        else in the room.
      * We can also take away the testing log messages as well.
        ----------------------------------------------------------------
            const io = require('socket.io')(3000);

            io.on('connection', function(socket) {
              socket.on('send-chat-message', function(message) {
                socket.broadcast.emit('chat-message', message);
              });
            });
        ----------------------------------------------------------------





Phase 6: Append the chat messages in the window
  * When we append the messages, what we want to do is stack the messages above the submission form so that
    we can see the progression of the conversation.

    6.1: To append, create a function that appends each message sent.
      * This is in scripts.js
      -----------------------------------------------------------
          function appendMessage(message) {
            const messageElement = document.createElement('div');           // messageElement creates a div.
            messageElement.innerText = message                              // the value of messageElement is going to be the message.
            messageContainer.append(messageElement)                         // and append to the viewport.
          }
      -----------------------------------------------------------

    6.2: But for this to work, you need to select "message-container"
      --------------------------------------------------------------
          const messageContainer = document.getElementById('message-container');
      --------------------------------------------------------------


    6.3: Then call the appendMessage in the socket.on with the data
      ---------------------------------------------------------------
          socket.on('chat-message', data => {
            appendMessage(data);
          });
      ---------------------------------------------------------------






Phase X: Add intitial Application UI
=============================================================================================
* Building out the initial structure of the application UI.
=============================================================================================

  // Add the initial HTML application structure...
    * Based on what we want to do with our base application, we want to display
      our messages that each user writes, have a input box for users to writes
      thier messages, and a button to send the messages.

      X.1: Add HTML:
        --------------------------------------------------------------
            <div id="message-container"></div>                              -- Container that all messages sent will be added in this div.
            <form id="send-container"action="">                             -- Form that submits to the server...
              <input type="text" id="message-input">                        -- Input field for message...
              <button type="submit" id="send-button">Send</button>          -- Button that will submit message.
            </form>
        --------------------------------------------------------------



-- Did a blitz on the app, will added process notes at a later time and do some styling tweaks later.